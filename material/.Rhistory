setwd("~/Documents/curso-sopi-herramientas-cuantitativas/material")
library(raster)
install.packages("raster")
install.packages(c("RStoolbox", "rgdal", "landsat", "ggplot2", "landsat8"))
library(RStoolbox)
library(raster)
library(rgdal)
xml.2015 <- readMeta("raster_data/LC82240782016304/LC82240782016304LGN00.xml")
ref.2015 <- stackMeta(xml.2015, quantity = "sre")
scaleF <- getMeta(ref.2015, xml.2015, what = "SCALE_FACTOR")
ref.2015 <- ref.2015 * scaleF
ref.2015 <- ref.2015[[-1,]]
ref.2015 <- ref.2015 * scaleF
ref.2015 <- ref.2015[[-1,]]
names(ref.2015) <- c("blue","green","red","nir","swir1","swir2")
ref.2015
ref.2015 <- stackMeta(xml.2015, quantity = "sre")
scaleF <- getMeta(ref.2015, xml.2015, what = "SCALE_FACTOR")
ref.2015 <- ref.2015 * scaleF
ref.2015 <- ref.2015[[-1,]]
names(ref.2015) <- c("blue","green","red","nir","swir1","swir2")
plot(ref.2015)
pair(ref.2015)
pairs(ref.2015)
set.seed(6)
?unsuperClass
uc.2016 <- unsuperClass(ref.2015, nClasses = 5, nStarts = 50, nSamples = 10000)
uc.2016
uc.2016$model
plot(uc.2016$map)
writeRaster(uc.2016,"raster_data/processed/uc2016", datatype = "INT1U")
writeRaster(uc.2016$map,"raster_data/processed/uc2016", datatype = "INT1U")
rasterOptions(addheader = "ENVI")
writeRaster(uc.2016$map,"raster_data/processed/uc2016", datatype = "INT1U")
id <- c(1,2,3,4,5)
id
clase <- c("A11","A12","A11","A12","A11")
as.data.frame(c(id,clase))
as.data.frame(clase)
as.data.frame(id,clase)
as.data.frame(id)
data.frame(id, clases)
data.frame(id, classes)
data.frame(id, clase)
df <- data.frame(id, clase)
levels(uc.2016)
levels(uc.2016) <- df
levels(uc.2016) <- df
levels(uc.2016)
plot(uc.2016)
plot(uc.2016$map)
levels(uc.2016$map) <- df
names(df) <- c("ID","Clase")
levels(uc.2016$map) <- df
plot(uc.2016$map)
uc.2016$map
classes <- layerize(uc.2016$map)
plot(classes)
uc.2016$map
unique(uc.2016$map)
for i in unique(uc.2016)
for i in unique(uc.2016):
A11 <- c(1,2,3)
A12 <- c(4,5)
A11 %in% uc.2016$map
grepl(1,uc.2016$map)
?reclassify
subs(uc.2016,clase)
pepe <- subs(uc.2016$map,clase)
df <- data.frame(id=1:4,v=c(1,1,1,2,3))
df <- data.frame(id=1:4,v=c(1,1,1,2,2))
df <- data.frame(id=1:5,v=c(1,1,1,2,2))
df
x <- subs(uc.2016$map, df)
plot(x)
plot(layerize(x))
classes <- layerize(uc.2016$map)
plot(classes)
set.seed(6)
uc.2016 <- unsuperClass(ref.2015, nClasses = 6, nStarts = 100, nSamples = 10000)
classes <- layerize(uc.2016$map)
plot(classes)
?clump
?sieve
?mode
a <- c(1,1,1,2,3,4,2)
mode(abbreviate())
mode(a)
modal(a)
window <- matrix(1,nrow=3, ncol=3)
filter.2016<-focal(uc.2016$map,w=window,fun=modal)
plot(filter.2016)
plot(uc.2016$map)
window <- matrix(1,nrow=15, ncol=15)
filter.2016<-focal(uc.2016$map,w=window,fun=modal)
plot(filter.2016)
?aggregate
modal(c(1,1,2,2))
modal(c(1,1,2,2,3))
?modal
?areaSieve
?clump
install.packages("bfast")
library(devtools)
install.packages("devtools")
library(devtools)
install_github('loicdtx/bfastSpatial')
library(bfastSpatial)
?timeStackMODIS
?superClass
data(rlogo)
?unsuperClass
library(rgdal)
vector <- readOGR(dsn="vector_data/", layer="entrenamiento")
vector
datos <- extract(l5_2011,vector, fun=qqnorm)
datos <- extract(ref.2015,vector, fun=qqnorm)
datos <- extract(ref.2015,vector, fun=hist)
?superClass
vector
summary(vector)
sup.2016 <- superClass(ref.2015, vector, responseCol = "C_ID")
sup.2016 <- superClass(ref.2015, vector, responseCol = "C_ID", method = "mlc")
sup.2016 <- superClass(ref.2015, vector, responseCol = "C_ID", model = "mlc")
install.packages("e1071")
library(e1071)
classes <- layerize(uc.2016$map)
sup.2016 <- superClass(ref.2015, vector, responseCol = "C_ID", model = "mlc")
sup.2016$model
sup.2016$modelFit
sup.2016$training
sup.2016$validation
sup.2016$map
sup.2016$classMapping
plot(sup.2016$map)
vector@data
sup.2016$classMapping
df <- vector@data['C_ID','ID']
df
vector@data['C_ID']
vector@data['C_ID','MC_ID']
vector@data['C_ID']
vector@data
vector@data['MC_ID']
vector@data[c('MC_ID','C_ID')]
df <- vector@data[c('MC_ID','C_ID')]
sup.2016$classMapping
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping)
reclas.2016
plot(reclas.2016)
reclas.2016$class
reclas.2016 <- subs(sup.2016$map, df)
reclas.2016b <- subs(reclas.2016, df)
reclas.2016b <- subs(reclas.2016, df)
names(df) <- c("id","clas")
reclas.2016b <- subs(reclas.2016, df)
reclas.2016
df
df <- vector@data[c('MC_ID','C_ID')]
df
names(df) <- c("clas","id")
df
df <- vector@data[c('MC_ID','C_ID')]
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, by = "C_ID", which = "MC_ID")
df
names(df) <- c("clas","id")
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, by = "id", which = "clas")
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, by = id, which = "clas")
df <- as.data.frame(vector@data[c('MC_ID','C_ID')])
df
names(df) <- c("clas","id")
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, by = 2, which = 1)
plot(reclas.2016)
plot(reclas.2016b)
df <- as.data.frame(vector@data[c('MC_ID','C_ID')])
names(df) <- c("clas","id")
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping)
reclas.2016b <- subs(reclas.2016, df,, by = 2, which = 1)
reclas.2016b <- subs(reclas.2016, df,by = 2, which = 1)
df
reclas.2016b <- subs(reclas.2016, df, by = 2, which = 1)
unique(df)
unique(df$clas])
unique(df$clas)
unique(df$id)
reclas.2016b <- subs(reclas.2016, df, by = 1, which = 2)
duplicated(df$id)
reclas.2016b <- subs(reclas.2016, df, by = 2, which = 1)
reclas.2016$class
reclas.2016b <- subs(reclas.2016$class, df, by = 2, which = 1)
reclas.2016b <- subs(reclas.2016, df, by = 2, which = 1)
df
sup.2016$classMapping
?match
vector@data$MC_ID[match(sup.2016$classMapping$class, vector@data$C_ID)]
sup.2016$classMapping$Mclass <- vector@data$MC_ID[match(sup.2016$classMapping$class, vector@data$C_ID)]
sup.2016$classMapping
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, which = "Mclass")
plot(reclas.2016)
vector@data
plot(layerize(reclas.2016))
reclas.2016 <- subs(sup.2016$map, sup.2016$classMapping, by = "class", which = "Mclass")
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc")
plot(layerize(sup.2016))
plot(layerize(sup.2016$map))
valid <- readOGR(dsn="vector_data/", layer="validacion")
valid
vector <- readOGR(dsn="vector_data/", layer="entrenamiento")
valid
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", valData = valid)
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", valData = valid)
valid <- readOGR(dsn="vector_data/", layer="validacion")
valid <- readOGR(dsn="vector_data/", layer="validacion")
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", valData = valid)
sup.2016 <- superClass(ref.2015, vector, valData = valid, responseCol = "MC_ID", model = "mlc")
vector <- readOGR(dsn="vector_data/", layer="entrenamiento")
valid <- readOGR(dsn="vector_data/", layer="validacion")
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", valData = valid)
library(caret)
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", valData = valid)
sup.2016 <- superClass(ref.2015, trainData = vector, responseCol = "MC_ID", model = "mlc", valData = valid)
all.equal(vector,valid)
sup.2016 <- superClass(ref.2015, vector, valData = valid, responseCol = "MC_ID", model = "mlc")
library(caret)
library(RStoolbox)
library(rgdal)
library(raster)
library(e1071)
library(e1071)
library(RStoolbox)
library(rgdal)
library(raster)
sup.2016 <- superClass(ref.2015, vector, valData = valid, responseCol = "MC_ID", model = "mlc")
valid
valid$id
valid$MC_ID
vector$MC_ID
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", trainPartition = 0.7)
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc", trainPartition = 0.5)
sup.2016$validation
validateMap(sup.2016$map,valData = valid, responseCol = "MC_ID")
validation <- validateMap(sup.2016$map,valData = valid, responseCol = "MC_ID")
validation$performance
summary(validation)
summary(validation$performance)
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc")
validation <- validateMap(sup.2016$map,valData = valid, responseCol = "MC_ID")
validation$performance
?surfaceArea()
?surfaceArea
area(sup.2016$map)
hist(sup.2016)
hist(sup.2016$map)
plot(layerize(sup.2016$map))
?zonal
zonal(sup.2016$map)
?validateMap
install.packages("randomForest")
library(caret)
library(randomForest)
library(e1071)
library(RStoolbox)
library(rgdal)
library(raster)
# Abrimos la imagen landsat 8
xml.2015 <- readMeta("raster_data/LC82300772015071/LC82300772015071LGN00.xml")
ref.2015 <- stackMeta(xml.2015, quantity = "sre")
scaleF <- getMeta(ref.2015, xml.2015, what = "SCALE_FACTOR")
ref.2015 <- ref.2015 * scaleF
ref.2015 <- ref.2015[[-1,]]
names(ref.2015) <- c("blue","green","red","nir","swir1","swir2")
# Clasificacion supervisada
vector <- readOGR(dsn="vector_data/", layer="entrenamiento")
valid <- readOGR(dsn="vector_data/", layer="validacion")
sup.2016 <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "mlc")
sup.2016b <- superClass(ref.2015, vector, responseCol = "MC_ID", model = "rf")
validation <- validateMap(sup.2016$map,valData = valid, responseCol = "MC_ID")
validationb <- validateMap(sup.2016b$map,valData = valid, responseCol = "MC_ID")
validation
validationb
validation
validationb
validation$performance$byClass
validationb$performance$byClass
plot(sup.2016b)
plot(sup.2016b$map)
plot(sup.2016b$map,sup.2016b$map)
plot(sup.2016b$map,sup.2016$map)
heatmap(sup.2016b$map,sup.2016$map)
b <- stack(sup.2016,sup.2016b)
b <- stack(sup.2016$map,sup.2016b$map)
plot(b)
plot(b$MC_ID.1,b$MC_ID.2)
heatmap(b$MC_ID.1,b$MC_ID.2)
plot(as.matrix(b$MC_ID.1),as.matrix(b$MC_ID.2))
heatmap(as.matrix(b$MC_ID.1),as.matrix(b$MC_ID.2))
